using Acr.UserDialogs;
using Plugin.Permissions;
using Plugin.Permissions.Abstractions;
using QuestHelper.Consts;
using QuestHelper.LocalDB.Model;
using QuestHelper.Managers;
using QuestHelper.Model;
using QuestHelper.Resources;
using QuestHelper.View;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Input;
using Microsoft.AppCenter.Analytics;
using PanCardView.Extensions;
using Syncfusion.SfChart.XForms;
using Xamarin.Essentials;
using Xamarin.Forms;
using Syncfusion.ListView.XForms;
using static QuestHelper.Model.AutoGeneratedRouted;
using QuestHelper.Model.Messages;

namespace QuestHelper.ViewModel
{
    public class MakeNewRouteAutoViewModel : INotifyPropertyChanged, IDialogEvents
    {
        TokenStoreService _tokenService = new TokenStoreService();
        private string _currentUserId;
        //private ObservableCollection<ViewLocalFile> _newRouteImgCollection = new ObservableCollection<ViewLocalFile>();
        private AutoGeneratedRouted _autoGeneratedRoute;
        private DateTime _periodRouteBegin = DateTime.Now.AddDays(-7);
        private DateTime _periodRouteEnd = DateTime.Now;
        private LocalFileCacheManager _localFileCacheManager = new LocalFileCacheManager();
        private DateTime _minRangeDate = DateTime.Now;
        private int _selectedImagesCount = 0;
        private bool _isGalleryIndexed = false;
        private bool _isVisiblePeriodChart = false;
        private AutoGeneratedPoint _selectedPreviewRoutePoint;
        //private List<ViewLocalFile> _selectedPreviewPointImages;
        private int _countImagesForToday;
        private int _countImagesFor1Day;
        private int _countImagesFor7Day;
        private int _countImagesForAllDays;
        private bool _isRouteMaking = false;
        private int _maxCountForWarning = 100;
        private DateTime _maxRangeDate;
        private DateTime _currentMonthChart;
        private bool _isShowModalDialog;
        private bool _isShowWarningNeedIndexing;
        private bool _isShowWarningMakeRoute;
        private bool _isShowWarningGuestMode;
        private string _pathToImageDirectory;
        private ModalParameters _settingsParams = new ModalParameters();
        private DateTime _viewRangeStartDate;
        private DateTime _viewRangeEndDate;
        private int _maxCountProgressItems;
        private int _currentProgressIndex;

        public INavigation Navigation { get; set; }
        public event PropertyChangedEventHandler PropertyChanged;

        public ICommand GenerateNewRouteCommand { get; private set; }
        public ICommand StartIndexGalleryCommand { get; private set; }
        public ICommand ShowPeriodChartCommand { get; private set; }
        public ICommand ShowMinimalPeriodCommand { get; private set; }
        public ICommand ShowImagesPreviewPointCommand { get; private set; }
        public ICommand SaveRouteCommand { get; private set; }
        public ICommand ChangeMonthPeriodCommand { get; private set; }
        public ICommand TapLinkCommand { get; private set; }
        public ICommand CloseWarningCommand { get; private set; }
        public ICommand OpenSettingsCommand { get; private set; }
        

        public bool IsBusy { get; set; }
        public bool SettingsIsModified { get; set; }

        public ObservableCollection<ChartDataPoint> ImagesRangeData { get; set; }

        public MakeNewRouteAutoViewModel()
        {
            GenerateNewRouteCommand = new Command(generateNewRouteCommand);
            StartIndexGalleryCommand = new Command(startIndexGalleryCommand);
            ShowPeriodChartCommand = new Command(showPeriodChartCommand);
            ShowMinimalPeriodCommand = new Command(showMinimalPeriodCommand);
            ShowImagesPreviewPointCommand = new Command(showImagesPreviewPointCommand);
            SaveRouteCommand = new Command(saveRouteCommand);
            ChangeMonthPeriodCommand = new Command(changeMonthPeriodCommand);
            TapLinkCommand = new Command<string>(tapLinkCommand);
            CloseWarningCommand = new Command(closeWarningCommand);
            OpenSettingsCommand = new Command(openSettingsCommand);
            TokenStoreService tokenService = new TokenStoreService();
        }

        private void openSettingsCommand(object obj)
        {
            _settingsParams =  new ModalParameters();
            var modalSettingsPageTask = Navigation.PushModalAsync(new SettingsPage(ref _settingsParams));
        }

        private void closeWarningCommand(object obj)
        {
            Device.BeginInvokeOnMainThread(() =>
            {
                IsShowModalDialog = false;
                IsShowWarningMakeRoute = false;
                IsShowWarningGuestMode = false;
                IsShowWarningNeedIndexing = false;
            });
        }

        private void tapLinkCommand(string url)
        {
            Analytics.TrackEvent($"AutoRoute:Tap link");
            Launcher.TryOpenAsync(new System.Uri(url));
        }

        private void changeMonthPeriodCommand(object obj)
        {
            Analytics.TrackEvent("AutoRoute:Change month", new Dictionary<string, string> { });
            int direction = Convert.ToInt16(obj.ToString());
            CurrentMonthChart = CurrentMonthChart.AddMonths(direction);
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs("CurrentMonthName"));
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs("PrevMonthName"));
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs("NextMonthName"));
            
            initRangeContent(CurrentMonthChart);
            //ViewRangeStartDate = new DateTime(CurrentMonthChart.Year, CurrentMonthChart.Month, 1);
            //ViewRangeEndDate = CurrentMonthChart;
        }

        private async void saveRouteCommand(object obj)
        {
            if (!isGuestMode())
            {
                if (IsShowWarningMakeRoute)
                {
                    Device.BeginInvokeOnMainThread(() =>
                    {
                        IsShowModalDialog = false;
                        IsRouteMaking = true;
                    });

                    var startDate = DateTime.Now;
                    AutoRouteMakerManager maker = new AutoRouteMakerManager(new ImageManager());
                    bool makeResult = false;
                    await Task.Factory.StartNew(() =>
                    {
                        makeResult = maker.Make(_autoGeneratedRoute, _currentUserId);
                    });

                    Device.BeginInvokeOnMainThread(() =>
                    {
                        if (makeResult)
                        {
                            var delay = DateTime.Now - startDate;
                            Analytics.TrackEvent("AutoRoute:Route saved", new Dictionary<string, string> {
                                {"delay", delay.ToString()},
                                {"Name", _autoGeneratedRoute.Name} });
                            UserDialogs.Instance.Toast(CommonResource.AutoRoutes_RouteMade);
                            MessagingCenter.Send<PageNavigationMessage>(new PageNavigationMessage() { PageToOpen = MainPages.Private }, string.Empty);
                        }
                        IsShowWarningMakeRoute = false;
                        IsRouteMaking = false;
                    });
                }
                else
                {
                    Device.BeginInvokeOnMainThread(() =>
                    {
                        IsShowModalDialog = true;
                        IsShowWarningMakeRoute = true;
                    });
                }
            }
            else
            {
                Analytics.TrackEvent("AutoRoute:Try save route in guest mode", new Dictionary<string, string> { });
                Device.BeginInvokeOnMainThread(() =>
                {
                    IsShowModalDialog = true;
                    IsShowWarningGuestMode = true;
                });
            }
        }

        private bool isGuestMode()
        {
            ParameterManager par = new ParameterManager();
            string guestModeParam = string.Empty;
            par.Get("GuestMode", out guestModeParam);

            return !string.IsNullOrEmpty(guestModeParam) && guestModeParam.Equals("1");
        }

        private void showImagesPreviewPointCommand(object obj)
        {
            AutoGeneratedPoint selectedPoint = new AutoGeneratedPoint();
            if(obj is AutoGeneratedImage)
            {
                AutoGeneratedImage selectedImage = (AutoGeneratedImage)obj;
                selectedPoint = PreviewRoutePoints.Where(p => p.Images.Contains(selectedImage)).SingleOrDefault();
            }
            else
            {
                selectedPoint = (AutoGeneratedPoint)obj;
            }
            OpenImagesPreviewPoint(selectedPoint);
        }

        public void OpenImagesPreviewPoint(AutoGeneratedPoint selectedPoint)
        {
            Analytics.TrackEvent("AutoRoute:Show point images", new Dictionary<string, string> {{"Name", selectedPoint.Name} });
            Navigation.PushModalAsync(new PreviewRoutePointImagesPage(selectedPoint));
            _selectedPreviewRoutePoint = selectedPoint;
        }

        private void showMinimalPeriodCommand(object obj)
        {
            IsVisiblePeriodChart = false;
        }

        private void showPeriodChartCommand(object obj)
        {
            CurrentMonthChart = MaxRangeDate;
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs("CurrentMonthName"));
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs("PrevMonthName"));
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs("NextMonthName"));
            initRangeContent(MaxRangeDate);
            IsVisiblePeriodChart = true;
        }

        private static async Task<bool> askToSaveRoute()
        {
            return await UserDialogs.Instance.ConfirmAsync(new ConfirmConfig() { Title = CommonResource.AutoRoutes_WarningRouteNotSavedYet, Message = CommonResource.CommonMsg_ContinueWithoutSave, OkText = CommonResource.CommonMsg_Yes, CancelText = CommonResource.CommonMsg_Cancel });
        }

        private static async Task<bool> askToMaxImageCountWarning()
        {
            return await UserDialogs.Instance.ConfirmAsync(new ConfirmConfig() { Title = CommonResource.AutoRoutes_WarningSelectedManyImages, Message = CommonResource.AutoRoutes_WarningMakeRouteWillHugeTime, OkText = CommonResource.CommonMsg_Yes, CancelText = CommonResource.CommonMsg_Cancel });
        }

        private async void startIndexGalleryCommand(object obj)
        {
            PermissionManager permissions = new PermissionManager();
            var taskPermissionRead = await permissions.CheckAndRequestStorageReadPermission();
            if(taskPermissionRead.HasFlag(Xamarin.Essentials.PermissionStatus.Granted))
            {
                ImagesCacheDbManager imagesCache = new ImagesCacheDbManager(new ImageManager(), PeriodRouteBegin, PeriodRouteEnd);
                string pathToDCIMDirectory = string.Empty;
                ParameterManager parameterManager = new ParameterManager();
                
                if (!parameterManager.Get("CameraDirectoryFullPath", out pathToDCIMDirectory))
                {
                    pathToDCIMDirectory = imagesCache.GetPathToCameraDirectory();
                    parameterManager.Set("CameraDirectoryFullPath", pathToDCIMDirectory);
                    MainThread.BeginInvokeOnMainThread(() =>
                    {
                        UserDialogs.Instance.Alert("Путь к вашим фотографиям был определен автоматически. При необходимости, вы можете его поменять в настройках.", "Обнаружен первый запуск", "Ок");
                    });
                }

                PathToImageDirectory = pathToDCIMDirectory;
                
                await Task.Factory.StartNew(() =>
                {
                    int maxCountFilesForShowModalDialog = 20; //кол-во файлов которое считаем большим и достаточным для отображения диалога обработки
                    var listFilesForIndexing = imagesCache.GetFilenamesForIndexing(PathToImageDirectory);
                    IsShowModalDialog = false;
                    int countFiles = listFilesForIndexing.Count;
                    IsGalleryIndexed = !(countFiles > 0);
                    IsRouteMaking = countFiles > maxCountFilesForShowModalDialog;
                    MaxCountProgressItems = countFiles;
                    attachReceiverMessagesForProgress();
                    imagesCache.UpdateFilenames(listFilesForIndexing, PathToImageDirectory);
                    detachReceiverMessagesForProgress();
                });
                await Task.Factory.StartNew(() => {
                    _countImagesForToday = imagesCache.GetCountImagesForDaysAgo(0, PathToImageDirectory);
                    _countImagesFor1Day = imagesCache.GetCountImagesForDaysAgo(1, PathToImageDirectory);
                    _countImagesFor7Day = imagesCache.GetCountImagesForDaysAgo(7, PathToImageDirectory);
                    _countImagesForAllDays = imagesCache.GetCountImagesForDaysAgo(1000, PathToImageDirectory);
                    Device.BeginInvokeOnMainThread(() =>
                    {
                        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs("CountImagesForToday"));
                        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs("CountImagesFor1Day"));
                        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs("CountImagesFor7Day"));
                        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs("CountImagesForAllDays"));
                        IsRouteMaking = false;
                    });
                });
                Device.BeginInvokeOnMainThread(() =>
                {
                    MinRangeDate = _localFileCacheManager.GetMinDate(PathToImageDirectory);
                    MaxRangeDate = _localFileCacheManager.GetMaxDate(PathToImageDirectory);
                    IsGalleryIndexed = true;
                    CurrentMonthChart = DateTime.Now;
                    IsShowWarningNeedIndexing = false;
                });
            }
        }

        private void attachReceiverMessagesForProgress()
        {
            MessagingCenter.Subscribe<CurrentProgressIndexMessage>(this, string.Empty, (sender) =>
            {
                CurrentProgressIndex = sender.Index;
            });
        }
        private void detachReceiverMessagesForProgress()
        {
            MessagingCenter.Unsubscribe<CurrentProgressIndexMessage>(this, string.Empty);
        }

        private async void generateNewRouteCommand(object obj)
        {
            _autoGeneratedRoute = null;

            if(obj != null)
            {
                int daysDepth = 0;
                try
                {
                    daysDepth = Convert.ToInt32(obj);
                }
                catch (Exception)
                {
                }
                Analytics.TrackEvent("AutoRoute:Generate new started", new Dictionary<string, string> {{"daysDepth",daysDepth.ToString()} });
            }

            bool maxCountOk = true;
            if(_selectedImagesCount > _maxCountForWarning)
            {
                maxCountOk = await askToMaxImageCountWarning();
            }
            var startDate = DateTime.Now;
            if (maxCountOk)
            {
                GC.Collect();
                IsRouteMaking = true;
                MaxCountProgressItems = _selectedImagesCount;
                attachReceiverMessagesForProgress();
                await Task.Factory.StartNew(() =>
                 {
                     ImagesCacheDbManager imagesCache = new ImagesCacheDbManager(new ImageManager(), PeriodRouteBegin, PeriodRouteEnd);
                     imagesCache.UpdateMetadata(PathToImageDirectory);
                     AutoRoutePreviewMakerManager routeMaker = new AutoRoutePreviewMakerManager(new LocalFileCacheManager());
                     _autoGeneratedRoute = routeMaker.Make(PeriodRouteBegin, PeriodRouteEnd, PathToImageDirectory);
                     Device.BeginInvokeOnMainThread(() =>
                     {
                         IsRouteMaking = false;
                         PropertyChanged?.Invoke(this, new PropertyChangedEventArgs("PreviewRoutePoints"));
                         UpdateRouteInfo();
                         var delay = DateTime.Now - startDate;
                         Analytics.TrackEvent("AutoRoute:Route generate completed", new Dictionary<string, string> {
                             {"delay", delay.ToString()},
                             {"Name",_autoGeneratedRoute.Name} });
                     });
                 });
                detachReceiverMessagesForProgress();
            }

        }
        
        public void UpdateRouteInfo()
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs("IsPreviewRouteMade"));
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs("PointCount"));
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs("ImageCount"));
        }

        public void UpdateSelectedCountDays(DateTime minDate, DateTime maxDate)
        {
            var countByDays = _localFileCacheManager.GetCountImagesByDay(minDate, maxDate, PathToImageDirectory).OrderBy(c=>c.Item1);
            _selectedImagesCount = countByDays.Sum(x=>x.Item2);
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs("SelectedPeriodText"));
        }

        public void CloseDialog()
        {
        }

        public async void StartDialog()
        {


            Analytics.TrackEvent("AutoRoute:Dialog started", new Dictionary<string, string> { });
            MaxRangeDate = DateTime.Now;

            _currentUserId = await _tokenService.GetUserIdAsync();

            IsShowModalDialog = !IsGalleryIndexed;
            IsShowWarningNeedIndexing = IsShowModalDialog;

            _selectedPreviewRoutePoint?.RaisedOnPropertyChanged("ImagesOnlyFirstThree");
            
            if (_settingsParams.SettingsIsModified)
            {
                _settingsParams.SettingsIsModified = false;
                startIndexGalleryCommand(new object());
            }
        }

        private void initRangeContent(DateTime currentMonthDate)
        {
            var beginCurrentMonth = new DateTime(currentMonthDate.Year, currentMonthDate.Month, 1);
            var endCurrentMonth = beginCurrentMonth.AddMonths(1).AddSeconds(-1);
            var countByDays = _localFileCacheManager.GetCountImagesByDay(beginCurrentMonth, endCurrentMonth, PathToImageDirectory).OrderBy(c=>c.Item1);
            PeriodRouteBegin = beginCurrentMonth;
            PeriodRouteEnd = endCurrentMonth;

            var imagesData = new ObservableCollection<ChartDataPoint>(countByDays.Select(c => new ChartDataPoint(new DateTime(c.Item1.Year, c.Item1.Month, c.Item1.Day), c.Item2, 100)));
            if (imagesData.Count < 2)
            {
                ImagesRangeData = new ObservableCollection<ChartDataPoint>();
                ImagesRangeData.Add(new ChartDataPoint(beginCurrentMonth, 0));
                if (imagesData.Count > 0)
                {
                    ImagesRangeData.Add(imagesData[0]);   
                }
                ImagesRangeData.Add(new ChartDataPoint(endCurrentMonth, 0));
            } else ImagesRangeData = imagesData;
            UpdateSelectedCountDays(beginCurrentMonth, endCurrentMonth);
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs("ImagesRangeData"));
            ViewRangeStartDate = PeriodRouteBegin;
            ViewRangeEndDate = PeriodRouteEnd;
        }

        public int CurrentProgressIndex
        {
            set
            {
                if (value != _currentProgressIndex)
                {
                    _currentProgressIndex = value;
                    PropertyChanged?.Invoke(this, new PropertyChangedEventArgs("CurrentProgressIndex"));
                }
            }
            get
            {
                return _currentProgressIndex;
            }
        }
        public int MaxCountProgressItems
        {
            set
            {
                if (value != _maxCountProgressItems)
                {
                    _maxCountProgressItems = value;
                    PropertyChanged?.Invoke(this, new PropertyChangedEventArgs("MaxCountProgressItems"));
                }
            }
            get
            {
                return _maxCountProgressItems;
            }
        }
        public DateTime ViewRangeStartDate
        {
            get
            {
                return _viewRangeStartDate;
            } 
            set
            {
                if (value != _viewRangeStartDate)
                {
                    _viewRangeStartDate = value;
                    PropertyChanged?.Invoke(this, new PropertyChangedEventArgs("ViewRangeStartDate"));
                }   
            }
        }
        public DateTime ViewRangeEndDate
        {
            get
            {
                return _viewRangeEndDate;
            } 
            set
            {
                if (value != _viewRangeEndDate)
                {
                    _viewRangeEndDate = value;
                    PropertyChanged?.Invoke(this, new PropertyChangedEventArgs("ViewRangeEndDate"));
                }   
            }
        }
        
        public bool IsPreviewRouteMade
        {
            get
            {
                return PreviewRoutePoints.Any(p => !p.IsDeleted);
            }
        }
        
        public string PathToImageDirectory
        {
            set
            {
                if (!value.Equals(_pathToImageDirectory))
                {
                    _pathToImageDirectory = value;
                }
            }
            get
            {
                return _pathToImageDirectory;
            }
        }
        
        public bool IsGalleryIndexed
        {
            set
            {
                if (value != _isGalleryIndexed)
                {
                    _isGalleryIndexed = value;
                }
            }
            get
            {
                return _isGalleryIndexed;
            }
        }
        
        public bool IsShowModalDialog
        {
            set
            {
                if (value != _isShowModalDialog)
                {
                    _isShowModalDialog = value;
                    PropertyChanged?.Invoke(this, new PropertyChangedEventArgs("IsShowModalDialog"));
                }
            }
            get
            {
                return _isShowModalDialog;
            }
        }

        public bool IsShowWarningNeedIndexing
        {
            set
            {
                if (value != _isShowWarningNeedIndexing)
                {
                    _isShowWarningNeedIndexing = value;
                    PropertyChanged?.Invoke(this, new PropertyChangedEventArgs("IsShowWarningNeedIndexing"));
                }
            }
            get
            {
                return _isShowWarningNeedIndexing;
            }
        }

        public bool IsShowWarningMakeRoute
        {
            set
            {
                if (value != _isShowWarningMakeRoute)
                {
                    _isShowWarningMakeRoute = value;
                    PropertyChanged?.Invoke(this, new PropertyChangedEventArgs("IsShowWarningMakeRoute"));
                }
            }
            get
            {
                return _isShowWarningMakeRoute;
            }
        }

        public bool IsShowWarningGuestMode
        {
            set
            {
                if (value != _isShowWarningGuestMode)
                {
                    _isShowWarningGuestMode = value;
                    PropertyChanged?.Invoke(this, new PropertyChangedEventArgs("IsShowWarningGuestMode"));
                }
            }
            get
            {
                return _isShowWarningGuestMode;
            }
        }

        public bool IsRouteMaking
        {
            set
            {
                if(value != _isRouteMaking)
                {
                    _isRouteMaking = value;
                    PropertyChanged?.Invoke(this, new PropertyChangedEventArgs("IsRouteMaking"));
                }
            }
            get
            {
                return _isRouteMaking;
            }
        }

        public string SelectedPeriodText
        {
            get
            {
                //return $"С {PeriodRouteBegin.ToString("d MMM")} по {PeriodRouteEnd.ToString("d MMM")}, выбрано изображений: {_selectedImagesCount.ToString()}";
                return $"{_selectedImagesCount.ToString()}";
            }
        }

        public ObservableCollection<AutoGeneratedRouted.AutoGeneratedPoint> PreviewRoutePoints
        {
            get
            {
                if(_autoGeneratedRoute!=null)
                {
                    return _autoGeneratedRoute.Points;
                }
                return new ObservableCollection<AutoGeneratedPoint>();
            }
        }

        public bool IsVisiblePeriodChart
        {
            set
            {
                if (value != _isVisiblePeriodChart)
                {
                    _isVisiblePeriodChart = value;
                    PropertyChanged?.Invoke(this, new PropertyChangedEventArgs("IsVisiblePeriodChart"));
                }
            }
            get
            {
                return _isVisiblePeriodChart;
            }
        }

        public DateTime CurrentMonthChart
        {
            get
            {
                if (_currentMonthChart.Year == 1) _currentMonthChart = DateTime.Now;

                return _currentMonthChart;
            }
            set
            {
                if(value != _currentMonthChart)
                {
                    _currentMonthChart = value;
                }
            }
        }

        public DateTime MinRangeDate
        {
            set
            {
                if (value != _minRangeDate)
                {
                    _minRangeDate = value;
                    PropertyChanged?.Invoke(this, new PropertyChangedEventArgs("MinRangeDate"));
                }
            }
            get
            {
                return _minRangeDate;
            }
        }
        
        public DateTime MaxRangeDate
        {
            //get => DateTime.Now;
            set
            {
                if (value != _maxRangeDate)
                {
                    _maxRangeDate = value;
                    PropertyChanged?.Invoke(this, new PropertyChangedEventArgs("MaxRangeDate"));
                }
            }
            get
            {
                return _maxRangeDate;
            }
        }

        public DateTime PeriodRouteBegin
        {
            set
            {
                if (value != _periodRouteBegin)
                {
                    _periodRouteBegin = value;
                    ///UpdateSelectedCountDays(_periodRouteBegin, PeriodRouteEnd);
                    PropertyChanged?.Invoke(this, new PropertyChangedEventArgs("PeriodRouteBegin"));
                }
            }
            get
            {
                return _periodRouteBegin;
            }
        }

        public DateTime PeriodRouteEnd
        {
            set
            {
                if (value != _periodRouteEnd)
                {
                    _periodRouteEnd = value;
                    //UpdateSelectedCountDays(PeriodRouteBegin, _periodRouteEnd);
                    PropertyChanged?.Invoke(this, new PropertyChangedEventArgs("PeriodRouteEnd"));
                }
            }
            get
            {
                return _periodRouteEnd;
            }
        }

        public string CurrentMonthName
        {
            get
            {
                return CurrentMonthChart.ToString("MMMM");
            }
        }

        public string PrevMonthName
        {
            get
            {
                return CurrentMonthChart.AddMonths(-1).ToString("MMMM");
            }
        }

        public string NextMonthName
        {
            get
            {
                return CurrentMonthChart.AddMonths(1).ToString("MMMM");
            }
        }

        public int ImageCount
        {
            get
            {
                var images = PreviewRoutePoints.Where(p => !p.IsDeleted).Select(p => new { count = p.Images.Where(i=>!i.IsDeleted).Select(i=>i).Count()});
                var total = images.Sum(p=>p.count);
                return total;
            }
        }

        public int PointCount
        {
            get
            {
                var total = PreviewRoutePoints.Where(p => !p.IsDeleted).Count();
                return total;
            }
        }

        public string CountImagesForToday
        {
            get
            {
                return $"{_countImagesForToday}";
            }
        }

        public string CountImagesFor1Day
        {
            get
            {
                return $"{_countImagesFor1Day}";
            }
        }

        public string CountImagesFor7Day
        {
            get
            {
                return $"{_countImagesFor7Day}";
            }
        }

        public string CountImagesForAllDays
        {
            get
            {
                return $"{_countImagesForAllDays}";
            }
        }


    }

    public class ModalParameters
    {
        public bool SettingsIsModified { get; set; }
    }
}
