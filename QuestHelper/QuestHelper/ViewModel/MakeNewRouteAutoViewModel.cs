using Acr.UserDialogs;
using Plugin.Permissions;
using Plugin.Permissions.Abstractions;
using QuestHelper.Consts;
using QuestHelper.LocalDB.Model;
using QuestHelper.Managers;
using QuestHelper.Model;
using QuestHelper.Resources;
using QuestHelper.View;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Input;
using Syncfusion.SfChart.XForms;
using Xamarin.Essentials;
using Xamarin.Forms;

namespace QuestHelper.ViewModel
{
    public class MakeNewRouteAutoViewModel : INotifyPropertyChanged, IDialogEvents
    {
        TokenStoreService _tokenService = new TokenStoreService();
        private string _currentUserId;
        private List<string> _newRouteImgCollection = new List<string>();
        private AutoGeneratedRouted _autoGeneratedRoute;
        private DateTime _periodRouteBegin = DateTime.Now.AddDays(-7);
        private DateTime _periodRouteEnd = DateTime.Now;
        private LocalFileCacheManager _localFileCacheManager = new LocalFileCacheManager();
        private DateTime _minRangeDate = DateTime.Now;
        private int _selectedImagesCount = 0;

        public INavigation Navigation { get; set; }
        public event PropertyChangedEventHandler PropertyChanged;

        public ICommand ShowNewRouteCommand { get; private set; }
        public ICommand GenerateNewRouteCommand { get; private set; }

        public bool IsBusy { get; set; }

        public ObservableCollection<ChartDataPoint> ImagesRangeData { get; set; }


        public MakeNewRouteAutoViewModel()
        {
            ShowNewRouteCommand = new Command(showNewRouteCommand);
            GenerateNewRouteCommand = new Command(generateNewRouteCommand);
            TokenStoreService tokenService = new TokenStoreService();
        }

        private void generateNewRouteCommand(object obj)
        {
            ImagesCacheDbManager imagesCache = new ImagesCacheDbManager(new ImageManager(), PeriodRouteBegin, PeriodRouteEnd);
            imagesCache.UpdateMetadata();

            AutoRouteMakerManager routeMaker = new AutoRouteMakerManager(new LocalFileCacheManager());
            _autoGeneratedRoute = routeMaker.Make(PeriodRouteBegin, PeriodRouteEnd);
            NewRouteImgCollection = new List<string>(_autoGeneratedRoute.Points.Select(p => p.Images[0]));

            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs("NewRouteImgCollection"));
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs("IsLoadingNewRouteData"));
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs("CountImagesInNewRouteText"));
        }

        public void UpdateSelectedCountDays(DateTime minDate, DateTime maxDate)
        {
            var countByDays = _localFileCacheManager.GetCountImagesByDay(minDate, maxDate).OrderBy(c=>c.Item1);
            _selectedImagesCount = countByDays.Sum(x=>x.Item2);
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs("SelectedPeriodText"));
        }

        private void showNewRouteCommand(object obj)
        {
            if(_autoGeneratedRoute != null)
            {
                Navigation.PushModalAsync(new MakeNewRoutePage(_autoGeneratedRoute));
            }
        }



        public void CloseDialog()
        {
         
        }

        public async void StartDialog()
        {
            _currentUserId = await _tokenService.GetUserIdAsync();
            ImagesCacheDbManager imagesCache = new ImagesCacheDbManager(new ImageManager(), PeriodRouteBegin, PeriodRouteEnd);
            //Task updateTask = Task.Factory.StartNew(() => { imagesCache.UpdateFilenames(); });
            //Task.WaitAny(updateTask);
            imagesCache.UpdateFilenames();
            MinRangeDate = _localFileCacheManager.GetMinDate();
            await Task.Factory.StartNew(() => updateRangeContentByTimer());
            //Device.StartTimer(TimeSpan.FromSeconds(3), updateRangeContentByTimer);
            //Хотел сделать при формирование маршрута при открытии страницы, но пока не получилось. Для отладки остановился на кнопке.
            /*if(NewRouteImgCollection.Count() == 0)
            {
                await refresh();
            }*/
        }

        private bool updateRangeContentByTimer()
        {
            var countByDays = _localFileCacheManager.GetCountImagesByDay(MinRangeDate, PeriodRouteEnd).OrderBy(c=>c.Item1);
            ImagesRangeData = new ObservableCollection<ChartDataPoint>(countByDays.Select(c => new ChartDataPoint(c.Item1, c.Item2)));
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs("ImagesRangeData"));
            return false;
        }
        

        public bool IsLoadingNewRouteData
        {
            get
            {
                return NewRouteImgCollection.Count == 0;
            }
        }

        public string SelectedPeriodText
        {
            get
            {
                return $"Количество фотографий в галерее по дням. Выбран период с {PeriodRouteBegin} по {PeriodRouteEnd}, изображений: {_selectedImagesCount.ToString()}";
            }    
        }
        
        public List<string> NewRouteImgCollection
        {
            set
            {
                if(value != _newRouteImgCollection)
                {
                    _newRouteImgCollection = value;
                    PropertyChanged?.Invoke(this, new PropertyChangedEventArgs("NewRouteImgCollection"));
                }
            }
            get
            {
                return _newRouteImgCollection;
            }

        }
        
        public DateTime MinRangeDate
        {
            set
            {
                if (value != _minRangeDate)
                {
                    _minRangeDate = value;
                    PropertyChanged?.Invoke(this, new PropertyChangedEventArgs("MinRangeDate"));
                }
            }
            get
            {
                return _minRangeDate;
            }
        }
        
        public DateTime MaxRangeDate
        {
            get => DateTime.Now;
        }

        public DateTime PeriodRouteBegin
        {
            set
            {
                if (value != _periodRouteBegin)
                {
                    _periodRouteBegin = value;
                    UpdateSelectedCountDays(_periodRouteBegin, PeriodRouteEnd);
                    PropertyChanged?.Invoke(this, new PropertyChangedEventArgs("PeriodRouteBegin"));
                }
            }
            get
            {
                return _periodRouteBegin;
            }
        }
        public DateTime PeriodRouteEnd
        {
            set
            {
                if (value != _periodRouteEnd)
                {
                    _periodRouteEnd = value;
                    UpdateSelectedCountDays(PeriodRouteBegin, _periodRouteEnd);
                    PropertyChanged?.Invoke(this, new PropertyChangedEventArgs("PeriodRouteEnd"));
                }
            }
            get
            {
                return _periodRouteEnd;
            }
        }
        
    }

}
