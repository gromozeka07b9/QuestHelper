using QuestHelper.Managers;
using System;
using System.Collections.Generic;
using System.Linq;
using Xamarin.Essentials;

namespace QuestHelper.Model
{
    public class AutoGeneratedRouted
    {
        IImageManager _imageManager;
        List<AutoGeneratedPoint> _points = new List<AutoGeneratedPoint>();

        public AutoGeneratedRouted(IImageManager imageManager)
        {
            _imageManager = imageManager;
        }

        public string Name { get; internal set; }
        public IEnumerable<GalleryImage> SourceGalleryImages { get; internal set; }

        internal Dictionary<(GpsCoordinates, DateTime), GalleryImage> LoadMetadataFromImages()
        {
            var groupedPhotos = new Dictionary<(GpsCoordinates, DateTime), GalleryImage>();
            foreach (var image in SourceGalleryImages)
            {
                var resultImage = _imageManager.GetPhoto(image.ImagePath);
                groupedPhotos.Add((resultImage.imageGpsCoordinates, image.CreateDate), image);
            }
            return groupedPhotos;
        }

        internal void Build(Dictionary<(GpsCoordinates, DateTime), GalleryImage> groupedPhotos)
        {
            _points = new List<AutoGeneratedPoint>();
            var sortedByTime = groupedPhotos.OrderBy(x => x.Key.Item2);

            var groupByDate = new List<List<(GpsCoordinates, DateTime, GalleryImage)>>();
            groupByDate.Add(new List<(GpsCoordinates, DateTime, GalleryImage)>());
            var date = sortedByTime.First().Key.Item2;
            int number = 0;
            foreach (var image in sortedByTime)
            {
                /*if (image.Key.Item2.TimeOfDay.TotalSeconds-date.TimeOfDay.TotalSeconds < 1000)
                {
                    groupByDate[number].Add((image.Key.Item1, image.Key.Item2, image.Value));


                }
                else*/
                {
                    AutoGeneratedPoint point = new AutoGeneratedPoint() { Name = (number + 1).ToString(), CreateDate = date, Longitude = image.Key.Item1.Longitude, Latitude = image.Key.Item1.Latitude };//Добавить широту и долготу
                    point.Images.AddRange(groupByDate[number].Select(x => x.Item3.ImagePath));
                    _points.Add(point);
                    groupByDate.Add(new List<(GpsCoordinates, DateTime, GalleryImage)>());
                    date = image.Key.Item2;
                    number++;
                    groupByDate[number] = new List<(GpsCoordinates, DateTime, GalleryImage)>();
                    groupByDate[number].Add((image.Key.Item1, image.Key.Item2, image.Value));
                }
            }


            //double longitude = 0.0;
            //double latitude = 0.0;
            //foreach (var image in SourceGalleryImages)
            //{
            //    var resultImage = imageManager.GetPhoto(image.ImagePath);
            //    if (resultImage.getMetadataPhotoResult)
            //    {
            //        var differenceKm = Location.CalculateDistance(latitude, longitude, resultImage.imageGpsCoordinates.Latitude, resultImage.imageGpsCoordinates.Longitude, DistanceUnits.Kilometers);
            //        longitude = resultImage.imageGpsCoordinates.Longitude;
            //        latitude = resultImage.imageGpsCoordinates.Latitude;
            //        AutoGeneratedPoint point = new AutoGeneratedPoint() { Name = image.CreateDate.ToString(), CreateDate = image.CreateDate, Longitude = longitude, Latitude = latitude };
            //        _points.Add(point);
            //    }
            //}
        }

        internal void BuildOld(List<ViewLocalFile> listCachedImages)
        {
            _points = new List<AutoGeneratedPoint>();
            var sortedByTime = listCachedImages.OrderBy(x => x.FileNameDate);

            double longitude = 0.0;
            double latitude = 0.0;
            AutoGeneratedPoint point = null;
            foreach (var image in sortedByTime)
            {
                //if (image.Processed) //Не понял пока, почему Processed = false, хотя оно вроде устанавливается при получении метаданных
                {
                    var differenceKm = Location.CalculateDistance(latitude, longitude, image.Latitude, image.Longitude, DistanceUnits.Kilometers);
                    longitude = image.Longitude;
                    latitude = image.Latitude;
                    if ((differenceKm > 0.7) || (point == null))
                    {
                        point = new AutoGeneratedPoint() { Name = image.FileNameDate.ToString(), CreateDate = image.FileNameDate.DateTime, Longitude = longitude, Latitude = latitude };
                        _points.Add(point);
                    }
                    point.Images.Add(image.ImagePreviewFileName);
                }
            }
        }

        public List<AutoGeneratedPoint> Points
        {
            get
            {
                return _points;
            }
        }

        public class AutoGeneratedPoint
        {
            public AutoGeneratedPoint()
            {
            }

            public string Name { get; set; }
            public DateTime CreateDate { get; internal set; }
            public double Longitude { get; internal set; }
            public double Latitude { get; internal set; }
            public List<string> Images { get; internal set; } = new List<string>();
        }

    }
}